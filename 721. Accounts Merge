// Here N is the number of accounts and K is the maximum length of an account.
// Time complexity: O(NKlog(NK))
// Space complexity: O(NK)

// Union Find
class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        List<List<String>> ans = new ArrayList<>();
        int n = accounts.size();
        UnionFind uf = new UnionFind(n);
        
        Map<String, Integer> accountName = new HashMap<>();
        for (int i = 0; i < n; i++) {
            List<String> account = accounts.get(i);
            for (int j = 1; j < account.size(); j++) {
                String email = account.get(j);
                if (accountName.containsKey(email)) {
                    int prev = accountName.get(email);
                    uf.union(i, prev);
                } else {
                    accountName.put(email, i);
                }
            }
        }
        
        Map<Integer, List<String>> accountEmail = new HashMap<>();
        for (String email: accountName.keySet()) {
            int parent = uf.root(accountName.get(email));
            accountEmail.putIfAbsent(parent, new ArrayList<>());
            accountEmail.get(parent).add(email);
        }
        
        for (int key: accountEmail.keySet()) {
            List<String> emails = accountEmail.get(key);
            Collections.sort(emails);
            emails.add(0, accounts.get(key).get(0));
            ans.add(emails);
        }
        return ans;  
    }
    
    class UnionFind {
        private int[] parent;
        private int[] weight;
        
        public UnionFind(int size) {
            this.parent = new int[size];
            this.weight = new int[size];
            
            for (int i = 0; i < size; i++) {
                parent[i] = i;
                weight[i] = 1;
            }
        }
        
        public int root(int s) {
            if (s == parent[s]) return s;
            return root(parent[s]);
        }
        
        public void union(int s, int t) {
            int ps = root(s);
            int pt = root(t);
            if (ps == pt) return;
            if (weight[ps] > weight[pt]) {
                parent[pt] = ps;
                weight[ps] += weight[pt];
            }  else {
                parent[ps] = pt;
                weight[pt] += weight[ps];
            }
        }
    }
}

// DFS
class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        Map<String, String> names = new HashMap<>();
        Map<String, Set<String>> emails = new HashMap<>();
        
        for (List<String> account: accounts) {
            String name = account.get(0);
            for (int i = 1; i < account.size(); i++) {
                String email = account.get(i);
                names.put(email, name);
                emails.putIfAbsent(email, new HashSet<>());
                
                if (i == 1) continue;
                String prev = account.get(i - 1);
                emails.get(email).add(prev);
                emails.get(prev).add(email);
            }
        }
        
        List<List<String>> result = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        for (String email: names.keySet()) {
            if (visited.add(email)) {
                List<String> ans = new LinkedList<>();
                dfs(emails, email, visited, ans);
                Collections.sort(ans);
                ans.add(0, names.get(email));
                result.add(ans);
            }

        }
        return result;
    }     
    
    public void dfs(Map<String, Set<String>> emails, String email, Set<String> visited, List<String> ans) {
        ans.add(email);
        for (String str: emails.get(email)) {
            if (visited.add(str)) {
                dfs(emails, str, visited, ans);
            }
        }
    }
}
