// Time: O(n)
// Space: O(h)
class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValid(root, null, null);
    }
    
    public boolean isValid(TreeNode node, Integer min, Integer max) {
        if (node == null) return true;
        if ((min != null && node.val <= min) || 
            (max != null && node.val >= max)) 
            return false;
        boolean left = isValid(node.left, min, node.val);
        boolean right = isValid(node.right, node.val, max);
        return left && right;
    }   
}

// Inorder interative
// Time: O(n)
// Space: O(n)
class Solution {
    public boolean isValidBST(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        Integer prev = null;
        while (curr != null || !stack.isEmpty()) {
            while (curr != null) {
                stack.push(curr);
                curr = curr.left;
            }
            
            curr = stack.pop();
            if (prev != null && curr.val <= prev) return false;   
            prev = curr.val;
            curr = curr.right; 
        }
        return true;
    }
}
