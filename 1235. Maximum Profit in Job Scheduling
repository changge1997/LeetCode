// Time: O(NlogN)
// Space: O(N)

// Bottom-Up Dynamic Programming + Binary Search
class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int n = startTime.length;
        int[][] jobs = new int[n][3];
        for (int i = 0; i < n; i++) {
            jobs[i] = new int[]{startTime[i], endTime[i], profit[i]};
        }
        Arrays.sort(jobs, (a,b) -> (a[0] - b[0]));
        int[] maxProfit = new int[n];
        maxProfit[n - 1] = jobs[n - 1][2];
        for (int i = n - 2; i >= 0; i--) {
            int targetIndex = binarySearch(jobs, i);
            int curr = jobs[i][2] + (targetIndex == n? 0: maxProfit[targetIndex]);
            maxProfit[i] = Math.max(curr, maxProfit[i + 1]);
        }
        return maxProfit[0];
    }
    
    public int binarySearch(int[][] jobs, int currIdx) {
        int n = jobs.length;
        int low = currIdx + 1;
        int high = n;
        while (low < high) {
            int mid = low + (high - low)/2;
            if (jobs[mid][0] < jobs[currIdx][1]) low = mid + 1;
            else high = mid;
        }
        return low;
    }
}
