// Time: O(M*N)
// Space: O(M*N)

// DFS
class Solution {
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    dfs(grid, m, n, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    
    public void dfs(char[][] grid, int m, int n, int row, int col) {
        if (row < 0 || row >= m || col < 0 || col >= n || grid[row][col] == '0') return;
        grid[row][col] = '0';
        dfs(grid, m, n, row + 1, col);
        dfs(grid, m, n, row - 1, col);
        dfs(grid, m, n, row, col + 1);
        dfs(grid, m, n, row, col - 1);
    }
}

// BFS
class Solution {
    public int numIslands(char[][] grid) {
        int[][] neighbors = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    
                    // BFS for each '1'
                    grid[i][j] = '0';
                    Queue<int[]> queue = new LinkedList<>();
                    queue.offer(new int[]{i, j});
                    while (!queue.isEmpty()) {
                        int[] curr = queue.poll();
                        int row = curr[0];
                        int col = curr[1];
                        for (int[] neighbor: neighbors) {
                            int r = row + neighbor[0];
                            int c = col + neighbor[1];
                            if (r < 0 || r >= m || c < 0 || c >= n || grid[r][c] == '0') continue;
                            grid[r][c] = '0';
                            queue.offer(new int[]{r, c});
                        }
                    }
                }
            }
        }
        return count;
    }
}
