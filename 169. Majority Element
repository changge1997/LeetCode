    // Sorting
    // Time: O(nlogn); Space: O(1)
    public int majorityElement(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        return nums[n/2];
    }
    
    // HashMap
    // Time: O(n); Space: O(n)
    public int majorityElement(int[] nums) {
        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
            if (map.get(nums[i]) > n/2) return nums[i];
        }
        return 0;
    }
    
    // Boyer-Moore Majority Vote Algorithm
    // https://www.zhihu.com/question/49973163/answer/235921864
    // Time: O(n); Space: O(1)
    class Solution {
    public int majorityElement(int[] nums) {
    
        // 有一个隐形数组（只能存相同数字），marjor可以理解成array的放入的第一个元素；
        // 遇到相同的 count++; 遇到不同的 count--;
        // count = 0表示前面已经消完了，major要更新
        
        int count = 1;
        int major = nums[0];
        
        for (int i = 1; i < nums.length; i++) {
            if (count == 0) {
                major = nums[i]; 
                count++;
                continue;
            }
            if (nums[i] == major) count++;
            else count--;
        }
        return major;
    }
}
