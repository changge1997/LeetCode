// Time: O(n^3)
// Space: O(n)

// DP
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length();
        boolean[] dp = new boolean[n + 1];
        Set<String> set = new HashSet<>();
        set.addAll(wordDict);
        
        dp[0] = true;
        for (int i = 1; i <= n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (dp[j] && set.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            } 
        }
        
        return dp[n];
    }  
}

// BFS
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length();
        
        Set<String> set = new HashSet<>();
        set.addAll(wordDict);
        
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[n + 1];
        
        queue.offer(0);
        visited[0] = true;
        
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            for (int i = curr + 1; i <= n; i++) {
                if (visited[i]) continue;
                if (set.contains(s.substring(curr, i))) {
                    if (i == n) return true;
                    queue.offer(i);
                    visited[i] = true;
                }
            } 
        }
        
        return false;
    }  
}
