
// HashSet
// Time Complexity: O(N)
// Space Complexity: O(N)
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            if (!set.add(nums[i])) return true;
        }
        return false;
    }
}

// Sort
// Time Complexity: O(NlogN)
// Space Complexity: O(1)
class Solution {
    public boolean containsDuplicate(int[] nums) {
        
        Arrays.sort(nums);
        int pre = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if(nums[i] == pre) return true;
            pre = nums[i];
        }
        return false;
    }
}
