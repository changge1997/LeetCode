// Amortized O(1) per operation.

// Amortized analysis gives the average performance (over time) of each operation in the worst case. 
// The basic idea is that a worst case operation can alter the state in such a way that 
// the worst case cannot occur again for a long time, 
// thus amortizing its cost.

class MyQueue {

    Stack<Integer> in;
    Stack<Integer> out;
    
    public MyQueue() {
        in = new Stack<>();
        out = new Stack<>();
    }
    
    public void push(int x) {
        in.push(x);
    }
    
    public int pop() {
        peek();
        return out.pop();
    }
    
    public int peek() {
        if (out.isEmpty()) {
            while (!in.isEmpty()) {
                out.push(in.pop());
            }
        }
        return out.peek();
    }
    
    public boolean empty() {
        return in.isEmpty() && out.isEmpty();
    }
}
