
// Backtracking
// => a DFS traversal in a n-ary tree. 

// T be the target value, and M be the minimal value among the candidates.
// Time Complexity: O(n^(T/M + 1))
// Space Complexity: O(T/M)

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        
        // sort() method is to check duplicates for convinence.
        Arrays.sort(candidates);
        backtracking(candidates, target, 0, ans, curr);
        return ans;
    }
    
    public void backtracking(int[] candidates, int target, int start, List<List<Integer>> ans, List<Integer> curr) {
        if(target == 0) {
        
            // It is because of the line "curr.remove(curr.size() - 1)";
            // When we remove the choice you made, we are also going to remove the element from the list we added to the final result. 
            // To avoid this issue, we need to clone/duplicate our curr.
            
            ans.add(new ArrayList<>(curr));
            return;
        }
        if (target < 0) return;
        
        for (int i = start; i < candidates.length && target - candidates[i] >= 0; i++) {
            curr.add(candidates[i]);
            backtracking(candidates, target - candidates[i], i, ans, curr);
            // delete the element that just be added for backtracking
            curr.remove(curr.size() - 1); 
        }
    }   
}
