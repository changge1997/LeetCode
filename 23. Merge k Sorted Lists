// There are N nodes in the final linked list.
// K is the number of linked lists.

// Priority Queue
// Time: O(NlogK)
// O(logK) for every pop and insertion to priority queue; total N nodes.
// Space: O(K) the priority queue
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) return null;
        
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> (a.val - b.val));
        for (ListNode list: lists) {
            if (list != null) pq.offer(list);
        }
        
        ListNode pre = new ListNode(-1);
        ListNode pointer = pre;
        
        while (!pq.isEmpty()) {
            ListNode curr = pq.poll();
            pointer.next = curr;
            pointer = pointer.next;
            curr = curr.next;
            if (curr != null) pq.offer(curr);
        }
        return pre.next;
    }
}

// Divide and Conquer
// Time: O(NlogK)
// merge two sorted linked list in O(n) time where n is the total number of nodes in two lists.
// Space: O(logK) recursion
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        return divideAndConquer(lists, 0, lists.length - 1);
    }
    
    public ListNode divideAndConquer(ListNode[] lists, int start, int end) {
        if (start > end) return null;
        if (start == end) return lists[start];
        
        int mid = start + (end - start)/2;
        ListNode left = divideAndConquer(lists, start, mid);
        ListNode right = divideAndConquer(lists, mid + 1, end);
        
        return mergeTwoLists(left, right);
    }
    
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(-1);
        ListNode pre = dummy;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                pre.next = l1;
                l1 = l1.next;
            } else {
                pre.next = l2;
                l2 = l2.next; 
            }
            pre = pre.next;
        }
        
        pre.next = l1 == null? l2: l1;
        return dummy.next;
    }   
}
