// DP
// Time: O(M*N)
// Space: O(1)
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int m = mat.length;
        int n = mat[0].length;
        int[][] dist = new int[m][n];
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) continue;
                int upper = (i > 0)? mat[i - 1][j]: m*n;
                int left = (j > 0)? mat[i][j - 1]: m*n;
                mat[i][j] = Math.min(upper, left) + 1;   
            }
        }
        
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (mat[i][j] == 0) continue;
                int down = (i < m - 1)? mat[i + 1][j]: m*n;
                int right = (j < n - 1)? mat[i][j + 1]: m*n;
                mat[i][j] = Math.min(mat[i][j], Math.min(down, right) + 1);   
            }
        }
        
        return mat;
    }
}

// BFS 
// Time: O(M*N)
// Space: O(M*N)
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int m = mat.length;
        int n = mat[0].length;
        
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    queue.offer(new int[]{i, j});
                    visited[i][j] = true;
                }
            }
        }
        
        while (!queue.isEmpty()) {
            int[] curr = queue.poll(); 
            for (int[] dir: directions) {
                int row = curr[0] + dir[0];
                int col = curr[1] + dir[1];
                if (row >= m || row < 0 || col >= n || col < 0 || 
                    visited[row][col]) continue;
                mat[row][col] = mat[curr[0]][curr[1]] + 1;
                visited[row][col] = true;
                queue.offer(new int[]{row, col});
            }
            
        }
        return mat;
    }
}

// Another version without additional boolean[][]
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int m = mat.length;
        int n = mat[0].length;
        
        int[][] distance = new int[m][n];
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    queue.offer(new int[]{i, j});
                } else {
                    distance[i][j] = Integer.MAX_VALUE;
                } 
            }
        }
        
        while (!queue.isEmpty()) {
            int[] curr = queue.poll(); 
            for (int[] dir: directions) {
                int row = curr[0] + dir[0];
                int col = curr[1] + dir[1];
                if (row >= m || row < 0 || col >= n || col < 0 || 
                    distance[row][col] <= distance[curr[0]][curr[1]] + 1) continue;
                distance[row][col] = distance[curr[0]][curr[1]] + 1;
                queue.offer(new int[]{row, col});
            }
            
        }
        return distance;
    }
}
