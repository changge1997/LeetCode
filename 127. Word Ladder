//  M is the length of words and N is the total number of words in the input word list. 
// Time Complexity: O(M^2×N)
// Space Complexity: O(M^2×N)

// For bidirection:
// The search time and space reduces to half, since the two parallel searches meet somewhere in the middle.

// Two-direction BFS
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>(wordList);
        if (!dict.contains(endWord)) return 0;
        
        Set<String> begin = new HashSet<>();
        Set<String> end = new HashSet<>();
        begin.add(beginWord);
        end.add(endWord);
        
        int length = 1;
        while (begin.size() > 0) {
            Set<String> temp = new HashSet<>();
            for (String curr: begin) {
                char[] currChar = curr.toCharArray();
                for (int i = 0; i < currChar.length; i++) {
                    char prev = currChar[i];
                    for (char ch = 'a'; ch <= 'z'; ch++) {
                        if (ch == prev) continue;
                        currChar[i] = ch;
                        String newWord = new String(currChar);
                        if (end.contains(newWord)) return length + 1;
                        if (!dict.contains(newWord)) continue;
                        dict.remove(newWord);
                        temp.add(newWord);
                    }
                    currChar[i] = prev;
                }
            }
            
            length++;
            if (temp.size() <= end.size()) {
                begin = temp;
            } else {
                begin = end;
                end = temp;
            }
        }
        return 0;     
    }
}

// Normal BFS
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
    
        Set<String> dict = new HashSet<>(wordList);
        if (!dict.contains(endWord)) return 0;

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        int length = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size-- > 0) {
                String curr = queue.poll();
                char[] currChar = curr.toCharArray();
                
                for(int i = 0; i < currChar.length; i++) {
                    char temp = currChar[i];
                    for (char ch = 'a'; ch <= 'z'; ch++) {
                        if (temp == ch) continue;
                        currChar[i] = ch;
                        String newWord = new String(currChar);
                        if (!dict.contains(newWord)) continue;
                        if (newWord.equals(endWord)) return length + 1;
                        
                        dict.remove(newWord);
                        queue.offer(newWord);
                    }   
                    currChar[i] = temp;
                }  
            }
            length++;
        }
        return 0;
    }
}

