// Time: O(N * N!) 
//       there being n! permutations, and each permutation has n recursive calls to create it.
// Space: O(N * N!) because we have N! subarrays that have a length of N.
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        dfs(nums, new ArrayList<>(), ans);
        return ans;
    }
    
    public void dfs(int[] nums, List<Integer> list, List<List<Integer>> ans) { 
        int n = nums.length;
        if (list.size() == n) ans.add(new ArrayList<>(list));
        else {
            for (int i = 0; i< n; i++) {
                if (list.contains(nums[i])) continue;
                list.add(nums[i]);
                dfs(nums, list, ans);
                list.remove(list.size() - 1);
            }
        }
    }
}


class Solution {
    public List<List<Integer>> permute(int[] nums) {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        dfs(nums, 0, new ArrayList<>(), ans);
        return ans;
    }
    
    public void dfs(int[] nums, int idx, List<Integer> list, List<List<Integer>> ans) { 
        int n = nums.length;
        if (idx == n) ans.add(new ArrayList<>(list));
        else {
            for (int i = idx; i< n; i++) {
                list.add(nums[i]);
                swap(nums, i, idx);
                dfs(nums, idx + 1, list, ans);
                list.remove(list.size() - 1);
                swap(nums, i, idx);
            }
        }
    }
    
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
