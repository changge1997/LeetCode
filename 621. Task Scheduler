// Time: O(n)
// Space: O(26)
class Solution {
    public int leastInterval(char[] tasks, int n) {
        int len = tasks.length;
        int[] map = new int[26];
    
        int max = 0;
        int maxCount = 0;
        for (char c: tasks) {
            map[c-'A']++;
            if (max == map[c-'A']) maxCount++;
            else if (max < map[c-'A']) {
                max = map[c-'A'];
                maxCount = 1;
            }
        }
        
        int availableUnit = (n - maxCount + 1) * (max - 1);
        int remainingChar = len - maxCount * max;
        int idle = Math.max(availableUnit - remainingChar, 0);
        
        return len + idle;
    }
}
