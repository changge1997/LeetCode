// Sort用了O(nlogn)
// Time Complexity: O(n^2)
// Space Complexity: O(1)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        
        Arrays.sort(nums);
        int n = nums.length;

        for (int i = 0; i < n && nums[i] <= 0; i++) {
            if (i > 0 && nums[i-1] == nums[i]) continue;
            int start = i + 1;
            int end = n - 1;
            while (start < end) {
                int sum = nums[start] + nums[end];
                if (sum + nums[i] == 0) {
                    ans.add(new ArrayList<>(List.of(nums[i], nums[start], nums[end])));
                    while (start < end && nums[start + 1] == nums[start]) start++;
                    start++;
                } else if (sum + nums[i] > 0) end--;
                else start++;
            }
        }
        
        return ans;
    }
}

