
// DP
// Time: O(MN)
// Space: O(MN)
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m + 1][n + 1];
        
        dp[1][1] = 1;
        for (int i = 1; i <= m; i++) 
            for (int j = 1; j <= n; j++) {
                if (i == 1 && j == 1) continue;
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        return dp[m][n];
    }
}

// Math:
// Time: O(min(M,N)
// Space: O(1)
class Solution {
    public int uniquePaths(int m, int n) {
        // total m - 1 + n - 1 steps
        // choose m - 1 to go right, then n - 1 to go left
        // C(m - 1, m + n - 2);
        
        int N = m + n - 2;
        int k = Math.min(m, n) - 1;
        
        double ans = 1;
        for (int i = 1; i <= k; i++) {
            ans *= ((double) (N - k + i)/(double) i);
        }
        return (int) Math.round(ans);
    }
}
