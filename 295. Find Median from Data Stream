// add: O(logN)
// get: O(1)
class MedianFinder {

    PriorityQueue<Integer> min;
    PriorityQueue<Integer> max;
    
    public MedianFinder() {
        this.min = new PriorityQueue<>();
        this.max = new PriorityQueue<>(Collections.reverseOrder());
    }
    
    public void addNum(int num) {
        if (max.isEmpty() || num < max.peek()) {
            max.offer(num);
        } else {
            min.offer(num);
        }
        
        if (min.size() - max.size() > 1) {
            max.offer(min.poll());
        }
        if (max.size() - min.size() > 1) {
            min.offer(max.poll());
        }
    }
    
    public double findMedian() {
        if (max.size() > min.size()) return max.peek();
        if (min.size() > max.size()) return min.peek();

        return (max.peek() + min.peek())/2.0;
    }
}
