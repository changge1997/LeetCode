// Time: O(logN)
// Space: O(1)
// during the last iteration of loop mid == low == high, mid can either be good or bad version, 
// if mid is good version (low =mid +1) we need to return mid +1 (i.e. low) as the first bad version,
// if mid was bad version (high = mid -1) low was already pointing to first bad version. 
// So we always return low.

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int low = 0;
        int high = n;
        while (low <= high) {
            int mid = low + (high - low)/2;
            if (isBadVersion(mid)) high = mid - 1;
            else low = mid + 1;
        }
        return low;
    }
}

// Another verision for low < high
public int firstBadVersion(int n) {
    int start = 1, end = n;
    while (start < end) {
        int mid = start + (end-start) / 2;
        if (!isBadVersion(mid)) start = mid + 1;
        else end = mid;            
    }        
    return start;
}
