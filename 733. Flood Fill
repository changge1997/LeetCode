// N is the number of pixels in the image. 
// Time: O(N)
// Space: O(N)

// BFS
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int m = image.length;
        int n = image[0].length;
        
        int origin = image[sr][sc];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{sr, sc});
        image[sr][sc] = color;
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            for (int[] dir: directions) {
                int row = curr[0] + dir[0];
                int col = curr[1] + dir[1];
                if (row >= m || row < 0 || col >= n || col < 0 || 
                    image[row][col] == color || image[row][col] != origin) continue;
                image[row][col] = color;
                queue.offer(new int[]{row, col});
            }
        }
        return image;
    }
}

// DFS
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int origin = image[sr][sc];
        if (origin != color) DFS(image, sr, sc, origin, color);
        return image;
    }
    
    public void DFS(int[][] image, int row, int col, int color, int newColor) {
        int m = image.length;
        int n = image[0].length;
        
        if (image[row][col] == color) {
            image[row][col] = newColor;
            
            if (row + 1 < m) DFS(image, row + 1, col, color, newColor);
            if (row - 1 >= 0) DFS(image, row - 1, col, color, newColor);
            if (col + 1 < n) DFS(image, row, col + 1, color, newColor);
            if (col - 1 >= 0) DFS(image, row, col - 1, color, newColor);
        }
        
    }
}
