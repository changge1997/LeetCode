// BFS: iteration with queue
// Time: O(N) since one has to visit each node.
// Space: O(D) to keep the queues, where D is a tree diameter. 
//        Let's use the last level to estimate the queue size. 
//        This level could contain up to N/2 tree nodes in the case of complete binary tree.
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if (root == null) return ans;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
                if (i == size - 1) ans.add(node.val);
            }
        }
        return ans;
    }
}

// DFS: recursion
// Time: O(N) since one has to visit each node.
// Space: O(H) to keep the recursion stack, where H is a tree height.
//        The worst-case situation is a skewed tree, when H = N.
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        rightNode(root, 0, ans);
        return ans;
    }
    
    public void rightNode(TreeNode root, int level, List<Integer> ans) {         
        if (root == null) return;
        if (level == ans.size()) ans.add(root.val);
        rightNode(root.right, level + 1, ans);
        rightNode(root.left, level + 1, ans);  
    }
}
